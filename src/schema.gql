# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

directive @auth(roles: [UserType]) on FIELD_DEFINITION

type Admin {
  active: Boolean!
  createdAt: DateTime!
  email: String!
  id: ID!
  isTwoFactorEnabled: Boolean!
  name: String!
  roles: [Role!]!
  updatedAt: DateTime!
}

type AdminBasicSignIn {
  accessToken: String!
  admin: Admin!
  refreshToken: String!
  type: SignInType!
}

input AdminChangePasswordInput {
  oldPassword: String!
  password: String!
}

input AdminDisableTwoFactorInput {
  password: String!
}

input AdminEnableTwoFactorInput {
  code: String!
}

input AdminFilterInput {
  active: BooleanFilterInput
  createdAt: DateFilterInput
  email: StringFilterInput
  id: IDFilterInput
  name: StringFilterInput
  role: IDFilterInput
  updatedAt: DateFilterInput
}

type AdminForgotPassword {
  token: String!
}

input AdminForgotPasswordInput {
  email: String!
}

type AdminGenerateTwoFactorSecret {
  qrCodeUrl: String!
  secret: String!
}

type AdminPagination {
  currentPage: Int!
  hasNextPage: Boolean!
  items: [Admin!]!
  limit: Int!
  page: Int!
  totalCount: Int!
  totalPages: Int!
}

input AdminPaginationInput {
  filter: AdminFilterInput
}

type AdminRefreshToken {
  accessToken: String!
  refreshToken: String!
}

input AdminRefreshTokenInput {
  accessToken: String!
  refreshToken: String!
}

input AdminResetPasswordInput {
  email: String!
  password: String!
  token: String!
}

union AdminSignIn = AdminBasicSignIn | AdminTwoFactorSignIn

input AdminSignInInput {
  email: String!
  password: String!
}

type AdminTwoFactorSignIn {
  token: String!
  type: SignInType!
}

type AdminVerifySignIn {
  accessToken: String!
  admin: Admin!
  refreshToken: String!
}

input AdminVerifySignInInput {
  code: String!
  token: String!
}

type BookingHistory {
  createdAt: DateTime!
  id: ID!
  metadata: JSON
  status: BookingHistoryStatusType!
  updatedAt: DateTime!
}

type BookingHistoryConnection {
  edges: [BookingHistoryEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input BookingHistoryConnectionInput {
  filter: BookingHistoryFilterInput
}

type BookingHistoryEdge {
  cursor: String!
  node: BookingHistory!
}

input BookingHistoryFilterInput {
  bookingId: IDFilterInput
  createdAt: DateFilterInput
  id: IDFilterInput
  status: BookingHistoryStatusInput
  updatedAt: DateFilterInput
}

input BookingHistoryStatusInput {
  between: [BookingHistoryStatusType!]
  eq: BookingHistoryStatusType
  ne: BookingHistoryStatusType
}

enum BookingHistoryStatusType {
  ACCEPTED
  CANCELED
  COMPLETED
  PENDING
  RESCHEDULED
  UPDATED
}

input BooleanFilterInput {
  eq: Boolean
  ne: Boolean
}

type Category {
  active: Boolean!
  createdAt: DateTime!
  icon: String
  id: ID!
  name: CategoryName!
  nameByLanguage(lang: Language): String!
  path: String!
  position: Float
  rate: Float!
  showOnTop: Boolean!
  updatedAt: DateTime!
}

input CategoryFilterInput {
  active: BooleanFilterInput
  createdAt: DateFilterInput
  id: IDFilterInput
  parentId: IDFilterInput
  parentPath: StringFilterInput
  path: StringFilterInput
  showOnTop: BooleanFilterInput
  updatedAt: DateFilterInput
}

input CategoryInput {
  filter: CategoryFilterInput
}

type CategoryName {
  ar: String!
  en: String!
}

input CategoryNameInput {
  ar: String!
  en: String!
}

input CreateAdminInput {
  email: String!
  name: String!
  roles: [String!]!
}

input CreateCategoryInput {
  icon: String!
  name: CategoryNameInput!
  parentId: ID
}

input CreateCustomerAddressInput {
  address: String!
  addressDetails: String!
  city: String!
  country: String!
  firstName: String!
  lastName: String!
  latitude: Float!
  longitude: Float!
  phoneNumber: String!
}

input CreateFeedbackInput {
  description: String!
  title: String!
}

input CreatePermissionInput {
  action: PermissionAction!
  name: String!
  type: PermissionType!
}

input CreateRoleInput {
  name: String!
  permissions: [String!]!
  type: RoleType!
}

type Customer {
  active: Boolean!
  createdAt: DateTime!
  email: String!
  id: String!
  name: String!
  updatedAt: DateTime!
  verified: Boolean!
}

type CustomerAddress {
  addressDetails: String!
  city: String!
  country: String!
  createdAt: DateTime!
  customerId: ID!
  default: Boolean!
  firstName: String!
  id: ID!
  lastName: String!
  location: LocationSchema!
  phoneNumber: String!
  updatedAt: DateTime!
}

type CustomerAddressConnection {
  edges: [CustomerAddressEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input CustomerAddressConnectionInput {
  filter: CustomerAddressFilterInput
}

type CustomerAddressEdge {
  cursor: String!
  node: CustomerAddress!
}

input CustomerAddressFilterInput {
  id: IDFilterInput
}

input CustomerAppleSignInInput {
  idToken: String!
  name: String
  nonce: String!
}

input CustomerFilterInput {
  active: BooleanFilterInput
  createdAt: DateFilterInput
  email: StringFilterInput
  id: IDFilterInput
  name: StringFilterInput
  updatedAt: DateFilterInput
  verified: BooleanFilterInput
}

type CustomerForgotPassword {
  email: String!
}

input CustomerForgotPasswordInput {
  email: String!
}

input CustomerGoogleSignInInput {
  idToken: String!
  name: String
}

type CustomerPagination {
  currentPage: Int!
  hasNextPage: Boolean!
  items: [Customer!]!
  limit: Int!
  page: Int!
  totalCount: Int!
  totalPages: Int!
}

input CustomerPaginationInput {
  filter: CustomerFilterInput
}

input CustomerResetPasswordInput {
  code: String!
  email: String!
  password: String!
}

type CustomerSignIn {
  accessToken: String!
  customer: Customer!
  refreshToken: String!
}

input CustomerSignInInput {
  email: String!
  password: String!
}

type CustomerSignUp {
  email: String!
}

input CustomerSignUpInput {
  email: String!
  name: String
  password: String!
}

type CustomerVerifyForgotPassword {
  code: String!
  email: String!
}

input CustomerVerifyForgotPasswordInput {
  code: String!
  email: String!
}

input CustomerVerifySignUpInput {
  code: String!
  email: String!
}

input DateFilterInput {
  between: [DateTime!]
  eq: DateTime
  gt: DateTime
  gte: DateTime
  lt: DateTime
  lte: DateTime
  ne: DateTime
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type DayShift {
  end: String!
  start: String!
}

input DeleteAdminInput {
  id: ID!
}

input DeleteCategoryInput {
  id: ID!
}

input DeleteCustomerAddressInput {
  id: ID!
}

input DeleteFeedbackInput {
  id: String!
}

input DeletePermissionInput {
  id: ID!
}

input DeleteRoleInput {
  id: ID!
}

input DeleteServiceProviderInput {
  id: ID!
}

input DisableAdminInput {
  id: ID!
}

input DisableCategoryInput {
  id: ID!
}

input DisableCategoryShowOnTopInput {
  id: ID!
}

input DisableCustomerInput {
  id: ID!
}

input DisablePermissionInput {
  id: ID!
}

input DisableRoleInput {
  id: ID!
}

input EnableAdminInput {
  id: ID!
}

input EnableCategoryInput {
  id: ID!
}

input EnableCategoryShowOnTopInput {
  id: ID!
}

input EnableCustomerInput {
  id: ID!
}

input EnablePermissionInput {
  id: ID!
}

input EnableRoleInput {
  id: ID!
}

input EnableServiceProviderInput {
  id: ID!
}

type Feedback {
  createdAt: DateTime!
  customer: Customer
  description: String!
  id: ID!
  pinned: Boolean!
  serviceProvider: ServiceProvider
  title: String!
  updatedAt: DateTime!
}

input FeedbackFilterInput {
  createdAt: DateFilterInput
  customer: StringFilterInput
  id: IDFilterInput
  pinned: BooleanFilterInput
  serviceProvider: StringFilterInput
  updatedAt: DateFilterInput
}

type FeedbackPagination {
  currentPage: Int!
  hasNextPage: Boolean!
  items: [Feedback!]!
  limit: Int!
  page: Int!
  totalCount: Int!
  totalPages: Int!
}

input FeedbackPaginationInput {
  filter: FeedbackFilterInput
}

type File {
  createdAt: DateTime!
  duration: Float
  extension: String!
  height: Float
  id: ID!
  size: Float!
  type: String!
  updatedAt: DateTime!
  url: String!
  width: Float
}

input IDFilterInput {
  between: [String!]
  eq: String
  gt: String
  gte: String
  lt: String
  lte: String
  ne: String
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

enum Language {
  AR
  EN
}

input LocationCoordinatesInput {
  latitude: Float!
  longitude: Float!
}

input LocationFilterInput {
  near: LocationCoordinatesInput
}

type LocationSchema {
  address: String!
  coordinates: [Float!]!
}

type Mutation {
  adminChangePassword(input: AdminChangePasswordInput!): Boolean!
  adminDisableTwoFactor(input: AdminDisableTwoFactorInput!): Admin!
  adminEnableTwoFactor(input: AdminEnableTwoFactorInput!): Boolean!
  adminForgotPassword(input: AdminForgotPasswordInput!): AdminForgotPassword!
  adminGenerateTwoFactorSecret: AdminGenerateTwoFactorSecret!
  adminRefreshToken(input: AdminRefreshTokenInput!): AdminRefreshToken!
  adminResetPassword(input: AdminResetPasswordInput!): Boolean!
  adminSignIn(input: AdminSignInInput!): AdminSignIn!
  adminUpdateProfile(input: UpdateAdminProfileInput!): Admin!
  adminVerifySignIn(input: AdminVerifySignInInput!): AdminVerifySignIn!
  createAdmin(input: CreateAdminInput!): Admin!
  createCategory(input: CreateCategoryInput!): Category!
  createCustomerAddress(input: CreateCustomerAddressInput!): CustomerAddress!
  createFeedback(input: CreateFeedbackInput!): Feedback!
  createPermission(input: CreatePermissionInput!): Permission!
  createRole(input: CreateRoleInput!): Role!
  customerAppleSignIn(input: CustomerAppleSignInInput!): CustomerSignIn!
  customerForgotPassword(input: CustomerForgotPasswordInput!): CustomerForgotPassword!
  customerGoogleSignIn(input: CustomerGoogleSignInInput!): CustomerSignIn!
  customerResetPassword(input: CustomerResetPasswordInput!): Boolean!
  customerSignIn(input: CustomerSignInInput!): CustomerSignIn!
  customerSignUp(input: CustomerSignUpInput!): CustomerSignUp!
  customerVerifyForgotPassword(input: CustomerVerifyForgotPasswordInput!): CustomerVerifyForgotPassword!
  customerVerifySignUp(input: CustomerVerifySignUpInput!): Boolean!
  deleteAdmin(input: DeleteAdminInput!): Admin!
  deleteCategory(input: DeleteCategoryInput!): Category!
  deleteCustomerAddress(input: DeleteCustomerAddressInput!): CustomerAddress!
  deleteFeedback(input: DeleteFeedbackInput!): Feedback!
  deletePermission(input: DeletePermissionInput!): Permission!
  deleteRole(input: DeleteRoleInput!): Role!
  deleteServiceProvider(input: DeleteServiceProviderInput!): ServiceProvider!
  disableAdmin(input: DisableAdminInput!): Admin!
  disableCategory(input: DisableCategoryInput!): Category!
  disableCategoryShowOnTop(input: DisableCategoryShowOnTopInput!): Category!
  disableCustomer(input: DisableCustomerInput!): Customer!
  disablePermission(input: DisablePermissionInput!): Permission!
  disableRole(input: DisableRoleInput!): Role!
  disableServiceProvider(input: EnableServiceProviderInput!): ServiceProvider!
  enableAdmin(input: EnableAdminInput!): Admin!
  enableCategory(input: EnableCategoryInput!): Category!
  enableCategoryShowOnTop(input: EnableCategoryShowOnTopInput!): Category!
  enableCustomer(input: EnableCustomerInput!): Customer!
  enablePermission(input: EnablePermissionInput!): Permission!
  enableRole(input: EnableRoleInput!): Role!
  enableServiceProvider(input: EnableServiceProviderInput!): ServiceProvider!
  pinFeedback(input: PinFeedbackInput!): Feedback!
  sendAdminResetPasswordLink(input: SendAdminResetPasswordLinkInput!): Admin!
  serviceProviderSignIn(input: ServiceProviderSignInInput!): ServiceProviderSignIn!
  serviceProviderSignUp(input: ServiceProviderSignUpInput!): ServiceProviderSignUp!
  setDefaultCustomerAddress(input: SetDefaultCustomerAddressInput!): CustomerAddress!
  sortCategories(input: SortCategoriesInput!): Boolean!
  unpinFeedback(input: UnPinFeedbackInput!): Feedback!
  updateAdmin(input: UpdateAdminInput!): Admin!
  updateCategory(input: UpdateCategoryInput!): Category!
  updateCustomerAddress(input: UpdateCustomerAddressInput!): CustomerAddress!
  updatePermission(input: UpdatePermissionInput!): Permission!
  updateRole(input: UpdateRoleInput!): Role!
}

type Notification {
  action: NotificationAction!
  createdAt: String!
  id: ID!
  metadata: JSON
  updatedAt: String!
}

enum NotificationAction {
  BOOKING_CANCELED
  BOOKING_CREATED
  BOOKING_RESCHEDULED
  BOOKING_UPDATED
}

type NotificationConnection {
  edges: [NotificationEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type NotificationEdge {
  cursor: String!
  node: Notification!
}

type OperatingDay {
  open: Boolean!
  shifts: [DayShift!]!
  timeSlots: [String!]!
}

type OperatingDays {
  friday: OperatingDay!
  monday: OperatingDay!
  saturday: OperatingDay!
  sunday: OperatingDay!
  thursday: OperatingDay!
  tuesday: OperatingDay!
  wednesday: OperatingDay!
}

type OperatingHours {
  days: OperatingDays!
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
}

type Permission {
  action: PermissionAction!
  active: Boolean!
  createdAt: DateTime!
  id: String!
  name: String!
  type: PermissionType!
  updatedAt: DateTime!
}

enum PermissionAction {
  CREATE
  DELETE
  READ
  UPDATE
}

input PermissionActionFilterInput {
  between: [PermissionAction!]
  eq: PermissionAction
  ne: PermissionAction
}

input PermissionFilterInput {
  action: PermissionActionFilterInput
  active: BooleanFilterInput
  createdAt: DateFilterInput
  id: IDFilterInput
  name: StringFilterInput
  type: PermissionTypeFilterInput
  updatedAt: DateFilterInput
}

type PermissionPagination {
  currentPage: Int!
  hasNextPage: Boolean!
  items: [Permission!]!
  limit: Int!
  page: Int!
  totalCount: Int!
  totalPages: Int!
}

input PermissionPaginationInput {
  filter: PermissionFilterInput
}

enum PermissionType {
  ADMIN
  BOOKING
  CATEGORY
  CONVERSATION
  CUSTOMER
  FEEDBACK
  FILE
  NOTIFICATION
  PERMISSION
  ROLE
  SERVICE_PROVIDER
}

input PermissionTypeFilterInput {
  between: [PermissionType!]
  eq: PermissionType
  ne: PermissionType
}

input PinFeedbackInput {
  id: String!
}

type ProfileDetail {
  address: String
  bio: String
  categories: [Category!]!
  completed: Boolean!
  image: File
  location: LocationSchema!
  operatingHours: OperatingHours
  phoneNumbers: [String!]
}

type Query {
  adminMe: Admin!
  adminsPagination(input: AdminPaginationInput, limit: Int = 10, page: Int = 1): AdminPagination!
  bookingHistoriesConnection(after: String, first: Int = 10, input: BookingHistoryConnectionInput): BookingHistoryConnection!
  categories(input: CategoryInput): [Category!]!
  categoriesCount: Int!
  customer(input: CustomerFilterInput): Customer
  customerAddressesConnection(after: String, first: Int = 10, input: CustomerAddressConnectionInput): CustomerAddressConnection!
  customerProfile: Customer!
  customersCount: Int!
  customersPagination(input: CustomerPaginationInput, limit: Int = 10, page: Int = 1): CustomerPagination!
  defaultCustomerAddress: CustomerAddress
  feedbacksPagination(input: FeedbackPaginationInput, limit: Int = 10, page: Int = 1): FeedbackPagination!
  notificationsConnection(after: String, first: Int = 10): NotificationConnection!
  permissionTypes: [PermissionType!]!
  permissionsPagination(input: PermissionPaginationInput, limit: Int = 10, page: Int = 1): PermissionPagination!
  rolesPagination(input: RolePaginationInput, limit: Int = 10, page: Int = 1): RolePagination!
  serviceProvider(input: ServiceProviderFilterInput): ServiceProvider
  serviceProvidersConnection(after: String, first: Int = 10, input: ServiceProviderConnectionInput): ServiceProviderConnection!
  serviceProvidersCount(input: ServiceProviderFilterInput): Int!
  serviceProvidersPagination(input: ServiceProviderPaginationInput, limit: Int = 10, page: Int = 1): ServiceProviderPagination!
}

type ReviewInformation {
  count: Float!
  rate: Float!
}

type Role {
  active: Boolean!
  createdAt: DateTime!
  id: ID!
  name: String!
  permissions: [Permission!]!
  type: RoleType!
  updatedAt: DateTime!
}

input RoleEnumFilterInput {
  between: [RoleType!]
  eq: RoleType
  ne: RoleType
}

input RoleFilterInput {
  active: BooleanFilterInput
  createdAt: DateFilterInput
  name: String
  permission: StringFilterInput
  type: RoleEnumFilterInput
  updatedAt: DateFilterInput
}

type RolePagination {
  currentPage: Int!
  hasNextPage: Boolean!
  items: [Role!]!
  limit: Int!
  page: Int!
  totalCount: Int!
  totalPages: Int!
}

input RolePaginationInput {
  filter: RoleFilterInput
}

enum RoleType {
  ADMIN
  SUPER_ADMIN
  USER
}

input SendAdminResetPasswordLinkInput {
  id: ID!
}

type ServiceProvider {
  active: Boolean!
  createdAt: DateTime!
  email: String!
  id: String!
  name: String!
  profileDetail: ProfileDetail
  reviewInformation: ReviewInformation
  updatedAt: DateTime!
  verified: Boolean!
}

type ServiceProviderConnection {
  edges: [ServiceProviderEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input ServiceProviderConnectionInput {
  filter: ServiceProviderFilterInput
}

type ServiceProviderEdge {
  cursor: String!
  node: ServiceProvider!
}

input ServiceProviderFilterInput {
  categoryId: IDFilterInput
  id: IDFilterInput
  location: LocationFilterInput
}

type ServiceProviderPagination {
  currentPage: Int!
  hasNextPage: Boolean!
  items: [ServiceProvider!]!
  limit: Int!
  page: Int!
  totalCount: Int!
  totalPages: Int!
}

input ServiceProviderPaginationInput {
  filter: ServiceProviderFilterInput
}

type ServiceProviderSignIn {
  accessToken: String!
  refreshToken: String!
  serviceProvider: ServiceProvider!
}

input ServiceProviderSignInInput {
  email: String!
  password: String!
}

type ServiceProviderSignUp {
  accessToken: String!
  refreshToken: String!
  serviceProvider: ServiceProvider!
}

input ServiceProviderSignUpInput {
  email: String!
  name: String!
  password: String!
}

input SetDefaultCustomerAddressInput {
  id: ID!
}

enum SignInType {
  BASIC
  TWO_FACTOR
}

input SortCategoriesInput {
  ids: [ID!]!
}

input StringFilterInput {
  beginsWith: String
  between: [String!]
  contains: String
  eq: String
  ne: String
  notContains: String
}

input UnPinFeedbackInput {
  id: String!
}

input UpdateAdminInput {
  id: String!
  name: String!
  roles: [String!]!
}

input UpdateAdminProfileInput {
  name: String!
}

input UpdateCategoryInput {
  active: Boolean
  icon: String!
  id: ID!
  name: CategoryNameInput
}

input UpdateCustomerAddressInput {
  address: String!
  addressDetails: String!
  city: String!
  country: String!
  firstName: String!
  id: ID!
  lastName: String!
  latitude: Float!
  longitude: Float!
  phoneNumber: String!
}

input UpdatePermissionInput {
  action: PermissionAction!
  id: ID!
  name: String!
  type: PermissionType!
}

input UpdateRoleInput {
  id: ID!
  name: String
  permissions: [String!]
  type: RoleType
}

enum UserType {
  ADMIN
  CUSTOMER
  SERVICE_PROVIDER
}